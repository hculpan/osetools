// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getAllCharacters = `-- name: GetAllCharacters :many
SELECT c.id, c.name, c.player_name, c.xp_bonus, c.campaign_id, c.create_datetime, u.username
FROM characters c, users u
WHERE c.user_id = u.user_id
`

type GetAllCharactersRow struct {
	ID             interface{}
	Name           string
	PlayerName     string
	XpBonus        int64
	CampaignID     int64
	CreateDatetime time.Time
	Username       string
}

func (q *Queries) GetAllCharacters(ctx context.Context) ([]GetAllCharactersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCharacters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCharactersRow
	for rows.Next() {
		var i GetAllCharactersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PlayerName,
			&i.XpBonus,
			&i.CampaignID,
			&i.CreateDatetime,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, realname, password, create_datetime FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Realname,
		&i.Password,
		&i.CreateDatetime,
	)
	return i, err
}

const getUserId = `-- name: GetUserId :one
SELECT id
FROM users
WHERE username = ? 
LIMIT 1
`

func (q *Queries) GetUserId(ctx context.Context, username string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getUserId, username)
	var id interface{}
	err := row.Scan(&id)
	return id, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, realname, password, create_datetime FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Realname,
			&i.Password,
			&i.CreateDatetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (username, realname, password, create_datetime)
VALUES (?, ?, ?, now())
RETURNING id, username, realname, password, create_datetime
`

type InsertUserParams struct {
	Username string
	Realname sql.NullString
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Username, arg.Realname, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Realname,
		&i.Password,
		&i.CreateDatetime,
	)
	return i, err
}
