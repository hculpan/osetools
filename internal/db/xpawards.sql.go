// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: xpawards.sql

package db

import (
	"context"
)

const deleteXpAwardsForCharacter = `-- name: DeleteXpAwardsForCharacter :exec
DELETE FROM xp_awards WHERE character_id = ?
`

func (q *Queries) DeleteXpAwardsForCharacter(ctx context.Context, characterID int32) error {
	_, err := q.db.ExecContext(ctx, deleteXpAwardsForCharacter, characterID)
	return err
}

const getLatestXpAwardByID = `-- name: GetLatestXpAwardByID :one
SELECT id, xp_award, xp_award_with_bonus, reason, character_id, create_datetime FROM xp_awards WHERE id = LAST_INSERT_ID()
`

func (q *Queries) GetLatestXpAwardByID(ctx context.Context) (XpAward, error) {
	row := q.db.QueryRowContext(ctx, getLatestXpAwardByID)
	var i XpAward
	err := row.Scan(
		&i.ID,
		&i.XpAward,
		&i.XpAwardWithBonus,
		&i.Reason,
		&i.CharacterID,
		&i.CreateDatetime,
	)
	return i, err
}

const getXpAwardsForCharacter = `-- name: GetXpAwardsForCharacter :many
SELECT id, xp_award, xp_award_with_bonus, reason, character_id, create_datetime FROM xp_awards
WHERE character_id = ?
ORDER BY id desc
`

func (q *Queries) GetXpAwardsForCharacter(ctx context.Context, characterID int32) ([]XpAward, error) {
	rows, err := q.db.QueryContext(ctx, getXpAwardsForCharacter, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []XpAward
	for rows.Next() {
		var i XpAward
		if err := rows.Scan(
			&i.ID,
			&i.XpAward,
			&i.XpAwardWithBonus,
			&i.Reason,
			&i.CharacterID,
			&i.CreateDatetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertXpAward = `-- name: InsertXpAward :exec
INSERT INTO xp_awards (xp_award, xp_award_with_bonus, reason, character_id, create_datetime)
VALUES (?, ?, ?, ?, now())
`

type InsertXpAwardParams struct {
	XpAward          int32
	XpAwardWithBonus int32
	Reason           string
	CharacterID      int32
}

func (q *Queries) InsertXpAward(ctx context.Context, arg InsertXpAwardParams) error {
	_, err := q.db.ExecContext(ctx, insertXpAward,
		arg.XpAward,
		arg.XpAwardWithBonus,
		arg.Reason,
		arg.CharacterID,
	)
	return err
}
