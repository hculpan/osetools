// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: xpbonusreasons.sql

package db

import (
	"context"
)

const deleteXpBonusForCharacter = `-- name: DeleteXpBonusForCharacter :exec
DELETE FROM xp_bonus_reasons
WHERE character_id = ?
`

func (q *Queries) DeleteXpBonusForCharacter(ctx context.Context, characterID int32) error {
	_, err := q.db.ExecContext(ctx, deleteXpBonusForCharacter, characterID)
	return err
}

const getLatestXpBonusReasonByID = `-- name: GetLatestXpBonusReasonByID :one
SELECT id, xp_bonus, reason, character_id, create_datetime FROM xp_bonus_reasons WHERE id = LAST_INSERT_ID()
`

func (q *Queries) GetLatestXpBonusReasonByID(ctx context.Context) (XpBonusReason, error) {
	row := q.db.QueryRowContext(ctx, getLatestXpBonusReasonByID)
	var i XpBonusReason
	err := row.Scan(
		&i.ID,
		&i.XpBonus,
		&i.Reason,
		&i.CharacterID,
		&i.CreateDatetime,
	)
	return i, err
}

const getXpBonusForCharacter = `-- name: GetXpBonusForCharacter :many
SELECT id, xp_bonus, reason, character_id, create_datetime FROM xp_bonus_reasons
WHERE character_id = ?
`

func (q *Queries) GetXpBonusForCharacter(ctx context.Context, characterID int32) ([]XpBonusReason, error) {
	rows, err := q.db.QueryContext(ctx, getXpBonusForCharacter, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []XpBonusReason
	for rows.Next() {
		var i XpBonusReason
		if err := rows.Scan(
			&i.ID,
			&i.XpBonus,
			&i.Reason,
			&i.CharacterID,
			&i.CreateDatetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertXpBonusForCharacter = `-- name: InsertXpBonusForCharacter :exec
INSERT INTO xp_bonus_reasons (xp_bonus, reason, character_id, create_datetime)
VALUES (?, ?, ?, now())
`

type InsertXpBonusForCharacterParams struct {
	XpBonus     int32
	Reason      string
	CharacterID int32
}

func (q *Queries) InsertXpBonusForCharacter(ctx context.Context, arg InsertXpBonusForCharacterParams) error {
	_, err := q.db.ExecContext(ctx, insertXpBonusForCharacter, arg.XpBonus, arg.Reason, arg.CharacterID)
	return err
}
