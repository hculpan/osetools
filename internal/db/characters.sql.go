// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: characters.sql

package db

import (
	"context"
	"database/sql"
)

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters where id = ?
`

func (q *Queries) DeleteCharacter(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteCharacter, id)
	return err
}

const getCharacterById = `-- name: GetCharacterById :one
SELECT id, name, player_name, xp_bonus, campaign_id, create_datetime FROM characters
where id = ? LIMIT 1
`

func (q *Queries) GetCharacterById(ctx context.Context, id interface{}) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacterById, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PlayerName,
		&i.XpBonus,
		&i.CampaignID,
		&i.CreateDatetime,
	)
	return i, err
}

const getCharacterWithXp = `-- name: GetCharacterWithXp :one
SELECT characters.id, characters.name, characters.player_name, characters.campaign_id, characters.xp_bonus, SUM(xp_awards.xp_award_with_bonus) AS total_xp
FROM characters
LEFT JOIN xp_awards ON characters.id = xp_awards.character_id
WHERE characters.id = ?
GROUP BY characters.id LIMIT 1
`

type GetCharacterWithXpRow struct {
	ID         interface{}
	Name       string
	PlayerName string
	CampaignID int64
	XpBonus    int64
	TotalXp    sql.NullFloat64
}

func (q *Queries) GetCharacterWithXp(ctx context.Context, id interface{}) (GetCharacterWithXpRow, error) {
	row := q.db.QueryRowContext(ctx, getCharacterWithXp, id)
	var i GetCharacterWithXpRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PlayerName,
		&i.CampaignID,
		&i.XpBonus,
		&i.TotalXp,
	)
	return i, err
}

const getCharactersForCampaign = `-- name: GetCharactersForCampaign :many
SELECT id, name, player_name, xp_bonus, campaign_id, create_datetime FROM characters
WHERE campaign_id = ?
`

func (q *Queries) GetCharactersForCampaign(ctx context.Context, campaignID int64) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, getCharactersForCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PlayerName,
			&i.XpBonus,
			&i.CampaignID,
			&i.CreateDatetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCharactersForCampaignWithXp = `-- name: GetCharactersForCampaignWithXp :many
SELECT characters.id, characters.name, characters.player_name, characters.campaign_id, characters.xp_bonus, SUM(xp_awards.xp_award_with_bonus) AS total_xp
FROM characters
LEFT JOIN xp_awards ON characters.id = xp_awards.character_id
WHERE characters.campaign_id = ?
GROUP BY characters.id
`

type GetCharactersForCampaignWithXpRow struct {
	ID         interface{}
	Name       string
	PlayerName string
	CampaignID int64
	XpBonus    int64
	TotalXp    sql.NullFloat64
}

func (q *Queries) GetCharactersForCampaignWithXp(ctx context.Context, campaignID int64) ([]GetCharactersForCampaignWithXpRow, error) {
	rows, err := q.db.QueryContext(ctx, getCharactersForCampaignWithXp, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCharactersForCampaignWithXpRow
	for rows.Next() {
		var i GetCharactersForCampaignWithXpRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PlayerName,
			&i.CampaignID,
			&i.XpBonus,
			&i.TotalXp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCharacter = `-- name: InsertCharacter :one
INSERT INTO characters (name, player_name, xp_bonus, campaign_id, create_datetime)
VALUES (?, ?, ?, ?, now())
RETURNING id, name, player_name, xp_bonus, campaign_id, create_datetime
`

type InsertCharacterParams struct {
	Name       string
	PlayerName string
	XpBonus    int64
	CampaignID int64
}

func (q *Queries) InsertCharacter(ctx context.Context, arg InsertCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, insertCharacter,
		arg.Name,
		arg.PlayerName,
		arg.XpBonus,
		arg.CampaignID,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PlayerName,
		&i.XpBonus,
		&i.CampaignID,
		&i.CreateDatetime,
	)
	return i, err
}
