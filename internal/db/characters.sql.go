// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: characters.sql

package db

import (
	"context"
	"time"
)

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters where id = ?
`

func (q *Queries) DeleteCharacter(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCharacter, id)
	return err
}

const getAllCharacters = `-- name: GetAllCharacters :many
SELECT id, name, player_name, xp_bonus, campaign_id, create_datetime, total_xp, dead, retainer
FROM characters
`

func (q *Queries) GetAllCharacters(ctx context.Context) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, getAllCharacters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PlayerName,
			&i.XpBonus,
			&i.CampaignID,
			&i.CreateDatetime,
			&i.TotalXp,
			&i.Dead,
			&i.Retainer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCharacterById = `-- name: GetCharacterById :one
SELECT id, name, player_name, xp_bonus, campaign_id, create_datetime, total_xp, dead, retainer FROM characters
where id = ? LIMIT 1
`

func (q *Queries) GetCharacterById(ctx context.Context, id int32) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacterById, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PlayerName,
		&i.XpBonus,
		&i.CampaignID,
		&i.CreateDatetime,
		&i.TotalXp,
		&i.Dead,
		&i.Retainer,
	)
	return i, err
}

const getCharactersForCampaign = `-- name: GetCharactersForCampaign :many
SELECT id, name, player_name, xp_bonus, campaign_id, create_datetime, total_xp, dead, retainer FROM characters
WHERE campaign_id = ?
  AND not dead
`

func (q *Queries) GetCharactersForCampaign(ctx context.Context, campaignID int32) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, getCharactersForCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PlayerName,
			&i.XpBonus,
			&i.CampaignID,
			&i.CreateDatetime,
			&i.TotalXp,
			&i.Dead,
			&i.Retainer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeadCharactersForCampaign = `-- name: GetDeadCharactersForCampaign :many
SELECT id, name, player_name, xp_bonus, campaign_id, create_datetime, total_xp, dead, retainer FROM characters
WHERE campaign_id = ?
  AND dead=true
`

func (q *Queries) GetDeadCharactersForCampaign(ctx context.Context, campaignID int32) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, getDeadCharactersForCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PlayerName,
			&i.XpBonus,
			&i.CampaignID,
			&i.CreateDatetime,
			&i.TotalXp,
			&i.Dead,
			&i.Retainer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestCharacterByID = `-- name: GetLatestCharacterByID :one
SELECT id, name, player_name, xp_bonus, campaign_id, create_datetime, total_xp, dead, retainer FROM characters WHERE id = LAST_INSERT_ID()
`

func (q *Queries) GetLatestCharacterByID(ctx context.Context) (Character, error) {
	row := q.db.QueryRowContext(ctx, getLatestCharacterByID)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PlayerName,
		&i.XpBonus,
		&i.CampaignID,
		&i.CreateDatetime,
		&i.TotalXp,
		&i.Dead,
		&i.Retainer,
	)
	return i, err
}

const insertCharacter = `-- name: InsertCharacter :exec
INSERT INTO characters (name, player_name, xp_bonus, campaign_id, create_datetime, total_xp)
VALUES (?, ?, ?, ?, ?, now())
`

type InsertCharacterParams struct {
	Name           string
	PlayerName     string
	XpBonus        int32
	CampaignID     int32
	CreateDatetime time.Time
}

func (q *Queries) InsertCharacter(ctx context.Context, arg InsertCharacterParams) error {
	_, err := q.db.ExecContext(ctx, insertCharacter,
		arg.Name,
		arg.PlayerName,
		arg.XpBonus,
		arg.CampaignID,
		arg.CreateDatetime,
	)
	return err
}

const updateCharacter = `-- name: UpdateCharacter :exec
UPDATE characters 
SET name = ?, player_name = ?, xp_bonus = ?, total_xp = ?
WHERE id = ?
`

type UpdateCharacterParams struct {
	Name       string
	PlayerName string
	XpBonus    int32
	TotalXp    int32
	ID         int32
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updateCharacter,
		arg.Name,
		arg.PlayerName,
		arg.XpBonus,
		arg.TotalXp,
		arg.ID,
	)
	return err
}
